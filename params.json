{"name":"Android-libjpeg-turbo","tagline":"Standalone Android.mk configuration for libjpeg-turbo.","body":"# libjpeg-turbo for Android\r\n\r\nThis repository provides a working Android.mk build configuration for [libjpeg-turbo](http://libjpeg-turbo.virtualgl.org/), which means that you'll be able to build your app with `ndk-build` instead of resorting to toolchain trickery. Just add this repository as a Git submodule and you should be good to go.\r\n\r\nNote however that this repository was originally created for a single purpose; to encode JPG files in a different NDK project. Therefore JNI bindings are not provided but a pull request is welcome. Also, any libjpeg-turbo feature that requires another dependency is currently not supported (incl. colorspace conversions). Again, pull requests are welcome.\r\n\r\nCurrrently, the following ABIs are supported:\r\n\r\n* armeabi\r\n* armeabi-v7a\r\n* armeabi-v7a-hard\r\n* arm64-v8a\r\n* x86\r\n* x86_64, requires [Android NDK](https://developer.android.com/tools/sdk/ndk/index.html) Revision 10e (May 2015) or later\r\n\r\nSIMD/ASM optimizations are enabled for supported ABIs where possible. libjpeg-turbo does not support MIPS properly (yet). Since MIPS is not supported, you'll need to specify your supported ABIs in `Application.mk` instead of simply giving it `APP_ABI := all`.\r\n\r\nNote that compiler optimization options are NOT included right now. If, for example, you wish to use `-Ofast` or other options, you'll need to add them yourself, possibly to your `Application.mk`.\r\n\r\n## Requirements\r\n\r\nThe following combinations are known to work:\r\n\r\n* [Android NDK](https://developer.android.com/tools/sdk/ndk/index.html), Revision 10e (May 2015)\r\n\r\n## Usage\r\n\r\nFirst, set up a vendor folder in your own project. You can skip this step if you've already decided where you wish to put the module.\r\n\r\n```bash\r\nmkdir -p jni/vendor\r\necho 'include $(call all-subdir-makefiles)' >> jni/vendor/Android.mk\r\n```\r\n\r\nThen add this repo as a submodule to your own project.\r\n\r\n```bash\r\ngit submodule add --name libjpeg-turbo \\\r\n  https://github.com/openstf/android-libjpeg-turbo.git jni/vendor/libjpeg-turbo\r\n```\r\n\r\nYou should now be able to do `LOCAL_STATIC_LIBRARIES += libjpeg-turbo` in your own module, `#include <turbojpeg.h>` and `ndk-build`.\r\n\r\n## Updating libjpeg-turbo\r\n\r\nYou need to go and fetch [libjpeg-turbo](http://libjpeg-turbo.virtualgl.org/) first. [Download](http://sourceforge.net/projects/libjpeg-turbo/files/) and extract the source package to `jni/vendor/libjpeg-turbo`. It's not a submodule because they still use SVN. Check `jni/vendor/libjpeg-turbo/Android.mk` to see which version of libjpeg-turbo is expected.\r\n\r\n```bash\r\ncd jni/vendor/libjpeg-turbo\r\ncp ~/Downloads/libjpeg-turbo-1.4.1.tar.gz .\r\ntar xzvf libjpeg-turbo-1.4.1.tar.gz\r\n```\r\n\r\nTo make updating easier, the `jni/vendor/libjpeg-turbo/libjpeg-turbo-*-*-*` folder should contain only unmodified original source files. Do not configure or move files around, it will be a pain later. Just unpack the source package and leave it be as-is.\r\n\r\nYou may sometimes also need to update the convenience files in `jni/vendor/libjpeg-turbo/include`. This doesn't seem to happen very often, though.\r\n\r\nNow update the `SOURCE_PATH` in `jni/vendor/libjpeg-turbo/Android.mk`. Then run `ndk-build` to make sure nothing broke.\r\n\r\nThen `git rm -r` the previous libjpeg-turbo source and commit the new source with your `Android.mk` modification(s).\r\n\r\n## Contributing\r\n\r\nSee [CONTRIBUTING.md](CONTRIBUTING.md).\r\n\r\n## License\r\n\r\nSee [LICENSE](LICENSE). libjpeg-turbo itself is governed by its own license.\r\n\r\nCopyright Â© CyberAgent, Inc. All Rights Reserved.\r\n","google":"UA-64458786-1","note":"Don't delete this file! It's used internally to help with page regeneration."}